FedoraReview: Tools to helper review packages for inclusion in Fedora
---------------------------------------------------------------------

This tool automates much of the dirty work when reviewing a package
for the Fedora Package Collection. 

Like:
- Downloading SRPM & SPEC from Bugzilla report
- Download upstream source
- Check md5sums
- Do a total review report will both manual & automated checks, ready to
  complete and paste into the Bugzilla report.

FedoraReview is still under heavy development.

Requirements
------------

* Python
* rpm & yum
* mock
* python-bugzilla
* gedit (default editor, can be changed in .conf file)

Download
--------
Install git and run the command below to clone the source from github

git clone https://github.com/timlau/FedoraReview

Usage
-----
Now switch to the new created FedoraReview directory and switch to the
src/ directory. Now you can run the tool:

./review.py -b <bugzilla report number>

It will download the SPEC & SRPM files from the Bugzilla report and
build them in mock and run a number of test and generate a report there
will be opened in gedit along with the spec file, so the stuff no automated
can be reviewed manually.

You will need to have mock installed and be member of the mock group for
the build to work. Run as root:

usermod -a G mock [your user name] && newgrp mock

Will show you the other options of the tools.

./review.py --help

This will assign the review to <bugzilla user> and set the review flags in
the bugzilla report.

./review.py -b <bugzilla report number> -u <bugzilla user> -p <bugzilla
password> --assign

At first run a configuration file (~/.config/FedoraReview/settings) will be created, it contains
default options like

 * editor  : The editor to use for showing the review report & .spec file.
 * bz_user : The default bugzilla user.

License
-------
FedoraReview is licensed under GPLv2+, for more details check COPYING.


Create a language plugin
------------------------
To create a plugin of checks, create a file in src/reviewtools/checks.
All the files in this folder are automatically loaded.

Your class should inherit from the class `LangCheckBase`.
You may want to create a Base class for your own language. Then each tests
is a class. This class has a __init__ method with predefine information
(such as the link to the guidelines and the text to be printed) and a 
run method which is what is actually performing the test.

For your test to be taken into account, the class should have
- 'Check' (case sensitive) in its name
- *Not* end with 'Base' (this is reserved for parent class which don't
actually run tests).
- The result of the test should be set using the self.set_passed():
    None  == na
    True  == passed
    False == failed

