#-*- coding: utf-8 -*-

# This is an example file of a language specific plugin

import re
import os

from FedoraReview import LangCheckBase, RegistryBase

class Registry(RegistryBase):

    group = 'R'

    def is_applicable(self):
        return self.spec.name.startswith("R-")


class RCheckBase(LangCheckBase):
    """ Base class for all R specific checks. """

    def __init__(self, base):
        LangCheckBase.__init__(self, base, __file__)


class  RCheckBuildRequires(RCheckBase):
    """ Check if the BuildRequires have the mandatory elements. """

    def __init__(self, checks):
        RCheckBase.__init__(self, checks)
        self.url = 'http://fedoraproject.org/wiki/Packaging:R'
        self.text = 'Package contains the mandatory BuildRequires.'
        self.automatic = True

    def run_on_applicable(self):
        """
        Overriding run_on_applicable means that this code will run
        if is_applicable() is True.
        """

        br = self.checks.spec.find_tag('BuildRequires')
        passed = 'R-devel' in br and 'tex(latex)' in br
        self.set_passed('pass' if passed else 'fail')


class RCheckLatestVersionIsPackaged(RCheckBase):
    """ Check if the lastest version is packaged. """

    # This class attribute is used to override an existing test, typically
    # a generic one.
    # For example, in R FedoraReview can quite safely check if it is the
    # latest version which have been packaged, but there is a generic
    # check for that as in most cases it won't be possible do to so.
    # Here we therefore specify how to turn off this generic check
    # and keep only this specific one.

    deprecates = [CheckLatestVersionIsPackaged]

    def __init__(self, base):
        CheckBase.__init__(self, base)
        self.url = 'https://fedoraproject.org/wiki/Packaging:Guidelines'
        self.text = 'Latest version is packaged.'
        self.automatic = True
        self.type = 'SHOULD'

    def run(self):
        """
        A function overriding run is always called, no matter what kind
        of package. Normally,you should first test whether the test
        is applicable and quit if not.
        """

        # See if the package should be checked. if not:
        #     set_passed('not_applicable')
        #     return

        # do something...

        # Access the spec file via:
        #  self.spec
        # the spec file itself is at:
        #  self.spec.lines

        # Access the srpm via:
        #  self.srpm

        # Access the rpmlint output via:
        #  self.srpm.rpmlint_output
        # Return a simple 'approved' ([x])
        #     self.set_passed('pass')
        # a failure[!]  with a Note: message:
        #     self.set_passed('fail', 'test failed because...')
        # or a pending [ ] status:
        #     self.set_passed('pending')

# Other classes doing other tests....
